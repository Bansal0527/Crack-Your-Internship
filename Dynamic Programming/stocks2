class Solution {
    public static int fn(int prices[], int idx, int buy, int dp[][]) {
        if(idx == prices.length) return 0;

        if(dp[idx][buy] != -1) return dp[idx][buy];
        // buy
        if(buy ==1) {
            // take or notTake
            return dp[idx][buy] = Math.max( - prices[idx] + fn(prices, idx +1, 0, dp), 0 + fn(prices, idx +1, 1, dp));
        }
        else {
             // take or notTake
            return  dp[idx][buy] = Math.max(  prices[idx] + fn(prices, idx +1, 1, dp), 0 + fn(prices, idx +1, 0, dp));
        }
    }
    public int maxProfit(int[] prices) {
        int n = prices.length;

        int dp[][] = new int[n][2];
        for(int i=0; i<n; i++) {
            Arrays.fill(dp[i], -1);
        }

        return fn(prices, 0, 1, dp);
    }
}





// tabulation 
// public int maxProfit(int[] prices) {

//     int n = prices.length;

//     int dp[][] = new int[n + 1][2];

//     // base case
//     dp[n][0] = dp[n][1] = 0;

//     for (int i = n - 1; i >= 0; i--) {
//         for (int buy = 0; buy <= 1; buy++) {
//             int profit = 0;
//             if (buy == 1) {

//                 profit = Math.max(-prices[i] + dp[i + 1][0], 0 + dp[i + 1][1]);
//             } else {
//                 profit = Math.max(prices[i] + dp[i + 1][1], 0 + dp[i + 1][0]);
//             }
//             dp[i][buy] = profit;
//         }
//     }

//     return dp[0][1];
// }
// }