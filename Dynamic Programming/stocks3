class Solution {
    public static int fn(int prices[], int idx, int buy , int cap, int dp[][][]){
        // base case
        if(cap ==0) return 0;
        if(idx == prices.length) return 0;

        if(dp[idx][buy][cap] != -1) return dp[idx][buy][cap];
        if (buy == 1) {
            // take or notTake
            return  dp[idx][buy][cap] = Math.max(-prices[idx] + fn(prices, idx + 1, 0,cap, dp), 0 + fn(prices, idx + 1, 1,  cap, dp));
        } else {
            // take or notTake
            return dp[idx][buy][cap] = Math.max(prices[idx] + fn(prices, idx + 1, 1,cap-1, dp), 0 + fn(prices, idx + 1, 0,cap, dp));
        }
    }
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n][2][3];

        for(int i=0; i<n; i++) {
            for(int j=0; j<2; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }

        return fn(prices, 0, 1, 2, dp);
    }
}