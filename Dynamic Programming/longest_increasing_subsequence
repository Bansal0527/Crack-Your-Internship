class Solution {
    public static int fn(int nums[] ,int idx, int pre_idx, int dp[][]) {
        // base case
        if(idx<0) return 0;

        if(dp[idx][pre_idx-1] != -1) return dp[idx][pre_idx-1];
        // not take
        
        int not_take = 0+fn(nums, idx-1, pre_idx, dp);
        int take = Integer.MIN_VALUE;
        if(pre_idx == nums.length || nums[idx] < nums[pre_idx]) {
            take = 1 + fn(nums, idx-1, idx, dp);
        }
        return dp[idx][pre_idx-1] = Math.max(not_take, take);
    }
    public int lengthOfLIS(int[] nums) {

        int n = nums.length;
        int dp[][] = new int[n][n+1];

        for(int i=0; i<n; i++) {
            Arrays.fill(dp[i], -1);
        }
        
        return fn(nums, n-1, n, dp);
    }
}



// tabulation


// public int lengthOfLIS(int[] nums) {

//     int n = nums.length;
//     int dp[][] = new int[n+1][n+1];

//     // for(int i=0; i<n; i++) {
//     //     Arrays.fill(dp[i], -1);
//     // }
    
//     // return fn(nums, 0, -1, dp);

//     for(int idx=n-1; idx>=0; idx--){
//         for(int pre_idx = idx-1; pre_idx >=-1; pre_idx--) {

//             int not_take = 0+ dp[idx+1][pre_idx +1] ;
//             int take = Integer.MIN_VALUE;
//             if(pre_idx == -1 || nums[idx] > nums[pre_idx]) {
//                 take = 1 + dp[idx+1][idx+1];
//             }
//             dp[idx][pre_idx+1] = Math.max(not_take, take);
//         }
//     }
//     return dp[0][-1+1];
// }