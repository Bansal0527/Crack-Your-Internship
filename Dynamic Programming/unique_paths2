class Solution {
    public static int fn(int[][] obstacleGrid, int m, int n, int dp[][]) {
        if(m==0 && n==0) {
            // reached destination
            return 1;
        }
        if(m<0) {
            return 0;
        }
        if(n<0) {
            return 0;
        }
        if(obstacleGrid[m][n] ==1) return 0;
        if(dp[m][n] != -1) {
            return dp[m][n];
        }
        // ya to left ya right
        int left =fn(obstacleGrid, m, n-1,dp);
        int up= fn(obstacleGrid, m-1, n, dp);
        return  dp[m][n] =left + up;
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int dp[][] = new int[m][n];
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                dp[i][j] = -1;
            }
        }
        if(obstacleGrid[m-1][n-1]==1 || obstacleGrid[0][0] == 1) return 0;
        return fn(obstacleGrid, m-1, n-1, dp);
    }
}