class Solution {
    public static int fn(String text1, String text2, int idx1, int idx2, int dp[][]) {
        // base case ->
        if(idx1<0 || idx2<0) {
            return 0;
        }
        char c1 = text1.charAt(idx1);
        char c2 = text2.charAt(idx2);
        if(dp[idx1][idx2] != -1) return dp[idx1][idx2];
        if(c1 == c2) {
            return dp[idx1][idx2] = 1+ fn(text1, text2, idx1-1, idx2-1, dp);
        }

        return dp[idx1][idx2]=  0+Math.max(fn(text1, text2, idx1, idx2-1, dp), fn(text1, text2, idx1-1, idx2, dp));
    }


    public int longestCommonSubsequence(String text1, String text2) {
        int n1 = text1.length();
        int n2 = text2.length();
        int dp[][] = new int[n1][n2];
        for(int i=0; i<n1; i++) {
            Arrays.fill(dp[i], -1);
        }
        return fn(text1, text2, n1-1, n2-1, dp);
    }
}