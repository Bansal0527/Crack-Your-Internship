
    // public static int fn(int matrix[][], int i, int j, int dp[][]) {
    //     // going from bootom to up
    //     // base case -> first row
    //     if(j<0 || j>= matrix[0].length) {
    //         return (int)Math.pow(10, 9);
    //     }
    //     if(i==0 ) {
    //         return matrix[i][j];
    //     }

        
    //     if(dp[i][j] != -1) return dp[i][j];

    //     int path1 = matrix[i][j] + fn(matrix, i-1, j-1, dp);
    //     int path2 = matrix[i][j] + fn(matrix, i-1, j, dp);
    //     int path3 = matrix[i][j] + fn(matrix, i-1, j+1, dp);
    //     return dp[i][j] = Math.min(path1, Math.min(path3, path2));

    // }
    
    public int minFallingPathSum(int[][] matrix) {
        int mini = Integer.MAX_VALUE;
        // int lastRow = matrix.length -1;
        int dp[][] = new int[matrix.length][matrix[0].length];

        // for(int i=0; i<dp.length; i++) {
        //     for(int j=0; j<dp[0].length; j++) dp[i][j] = -1;
        // }
        // for(int k=0; k<matrix[0].length; k++) {
        //     int ans = fn(matrix, lastRow, k, dp);
        //     mini = Math.min(mini, ans);

        // }
        // return mini;



        // tabulation
        //base case
        int n = dp.length;
        int m = dp[0].length;
        for(int j=0; j<dp[0].length; j++) {
            dp[0][j] = matrix[0][j];
        }
        for(int i=1; i<n; i++) {
            for(int j=0; j<m; j++) {

                int path1 = matrix[i][j];
                if(j-1 >=0) path1 += dp[i-1][j-1];
                else path1 = (int)Math.pow(10, 9);

                int path2 = matrix[i][j] + dp[i-1][j];
                int path3 = matrix[i][j];

                if(j+1 < m) path3 += dp[i-1][j+1];
                else path3 = (int)Math.pow(10, 9);
                dp[i][j] = Math.min( path1, Math.min(path2, path3));
            }
        }

        for(int j=0; j<matrix[0].length; j++) {
            int ans = dp[n-1][j];
            mini = Math.min(mini, ans);

        }
        return mini;
    }
