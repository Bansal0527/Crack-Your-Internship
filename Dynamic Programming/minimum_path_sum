class Solution {
    public static int fn(int grid[][],int m, int n, int dp[][]) {
        if(m==0 && n==0) {
            // reached destination
            return grid[0][0];
        }
        if(m==0) {
            // only option , go left
            return grid[m][n] + fn(grid, m, n-1, dp);
        }
        if(n==0) {
            // only option , go up
            return grid[m][n] + fn(grid, m-1, n, dp);
        }
        if(dp[m][n] != -1) {
            return dp[m][n];
        }

        // ya to left ya up
        int left =grid[m][n] + fn(grid, m, n-1, dp);
        int up= grid[m][n] + fn(grid, m-1, n, dp);
        // return dp[m][n] = left + up;
        return dp[m][n] =Math.min(left, up);
    }
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        int dp[][] = new int[m][n];
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                dp[i][j] = -1;
            }
        }
        return fn(grid, m-1,n-1,dp );
    }
}