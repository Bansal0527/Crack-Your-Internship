// problem 416

class Solution {
    public static boolean fn(int n, int k, int arr[], int dp[][]) {
        if(k == 0) {
            return true;
        }
        if(n == 0) return arr[0] == k;
        if(dp[n][k] != -1) {
            return dp[n][k] == 1;
        }
        // pick or not pick
        boolean notpick = fn(n-1, k, arr, dp);
        boolean pick = false;
        if(k >= arr[n]) {  // Use `k` instead of `target`
            pick = fn(n-1, k - arr[n], arr, dp);
        }

        dp[n][k] = pick || notpick ? 1 : 0;  // Convert boolean to int (1 for true, 0 for false)
        return pick || notpick;
    }
    public boolean canPartition(int[] nums) {
        int sum=0;
        int n = nums.length;
        for(int i=0; i<n; i++) {
            sum += nums[i];
        }
        if(sum %2 != 0) return false;
        int target = sum/2;

        int dp[][] = new int[n][target + 1];
        for(int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return fn(n-1, target, nums, dp);
    }
}