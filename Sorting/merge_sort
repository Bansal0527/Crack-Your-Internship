public class Solution {
	public static void merge(int arr[], int low, int mid, int high) {
		int temp[] = new int[high - low +1];
		int lp = low;
		int rp = mid+1;
		int k=0;
		while(lp <=mid && rp <= high) {
			if(arr[lp] < arr[rp]) {
				temp[k] = arr[lp];
				lp++;
			}
			else  {
				temp[k] = arr[rp];
				rp++;
			}
			k++;
		}

		while(lp <=mid) {
			temp[k++] = arr[lp++];
		}
		while(rp <=high) {
			temp[k++] = arr[rp++];
		}

		for (int i = 0; i < temp.length; i++) {
			arr[low + i] = temp[i];  // Fix: arr[low + i] instead of arr[i]
		}
	}
	public static void mergeSort(int arr[], int low, int high) {
		// base case
		if(low >= high) {
			return;
		}
		int mid = (low + high)/2; 
		mergeSort(arr, low, mid);
		mergeSort(arr, mid+1, high);
		merge(arr, low, mid, high);
	}
	public static void mergeSort(int[] arr, int n) {
		// Write your code here.
		mergeSort(arr, 0, n-1);

	}
}